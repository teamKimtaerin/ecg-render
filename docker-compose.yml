version: '3.8'

services:
  # GPU Render Server
  gpu-render:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecg-gpu-render
    ports:
      - "8090:8090"
    runtime: nvidia  # Requires nvidia-docker2
    environment:
      - BACKEND_CALLBACK_URL=${BACKEND_CALLBACK_URL:-http://host.docker.internal:8000}
      - S3_BUCKET=${S3_BUCKET:-ecg-rendered-videos}
      - AWS_REGION=${AWS_REGION:-ap-northeast-2}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - REDIS_URL=redis://redis:6379
      - MAX_CONCURRENT_JOBS=${MAX_CONCURRENT_JOBS:-3}
      - TEMP_DIR=/tmp/render
      - CUDA_VISIBLE_DEVICES=0
      - DISPLAY=:99
    volumes:
      - ./:/app
      - /tmp/render:/tmp/render
      - /dev/shm:/dev/shm  # Shared memory for Chromium
    depends_on:
      - redis
    networks:
      - render-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for job queue
  redis:
    image: redis:7-alpine
    container_name: ecg-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - render-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Monitoring with Redis Insight
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: ecg-redis-insight
    ports:
      - "8001:8001"
    volumes:
      - redis-insight-data:/db
    networks:
      - render-network
    depends_on:
      - redis
    profiles:
      - monitoring

networks:
  render-network:
    driver: bridge

volumes:
  redis-data:
  redis-insight-data: