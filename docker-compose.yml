version: '3.8'

services:
  redis:
    image: redis:7-alpine
    container_name: ecg-render-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecg-render-server
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - /tmp/ecg-render:/tmp/ecg-render

  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: ecg-render-worker
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    env_file:
      - .env
    depends_on:
      redis:
        condition: service_healthy
      server:
        condition: service_started
    volumes:
      - ./logs:/app/logs
      - /tmp/ecg-render:/tmp/ecg-render
    deploy:
      replicas: 2  # Number of worker instances
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

volumes:
  redis_data:
    driver: local

networks:
  default:
    name: ecg-render-network
    driver: bridge